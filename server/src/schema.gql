# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input IDFilterComparison {
  eq: Int
  gt: Int
  gte: Int
  like: Int
  lt: Int
  lte: Int
  neq: Int
  notLike: Int
}

type Mutation {
  addPermissionsToRole(id: [Int!]!, permissions: [Int!]!): Role!
  addPermissionsToUser(id: Int!, permissionsIds: [Int!]!): User!
  addRolesToUser(id: Int!, rolesIds: [Int!]!): User!
  createPermission(name: String!): Permission!
  createRole(name: String!): Role!
  createUser(email: String!, username: String!): User!
}

type OffsetPageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

input OffsetPaging {
  limit: Int
  offset: Int
}

type Permission {
  id: Int!
  name: String!
}

type Query {
  permission(id: [Int!]!): Permission!
  permissions: [Permission!]!
  role(id: [Int!]!): Role!
  roles: [Role!]!
  user(id: [Int!]!): User!
  users(filter: UserFilterInput, paging: OffsetPaging, sorting: [UserSort!]): UserConnection!
}

type Role {
  id: Int!
  name: String!
  permissions: [Permission!]
}

enum SortDirection {
  ASC
  DESC
}

input StringFilterComparison {
  eq: String
  gt: String
  gte: String
  like: String
  lt: String
  lte: String
  neq: String
  notLike: String
}

type User {
  email: String!
  id: Int!
  permissions: [Permission!]
  roles: [Role!]
  username: String!
}

type UserConnection {
  nodes: [User!]!
  pageInfo: OffsetPageInfo!
}

input UserFilterInput {
  and: [UserFilterInput!]
  email: StringFilterComparison
  id: IDFilterComparison
  or: [UserFilterInput!]
  permissions: UserFilterPermissionsInput
  username: StringFilterComparison
}

input UserFilterPermissionsInput {
  and: [UserFilterPermissionsInput!]
  id: IDFilterComparison
  name: StringFilterComparison
  or: [UserFilterPermissionsInput!]
}

input UserSort {
  direction: SortDirection
  field: UserSortField
}

enum UserSortField {
  email
  id
  username
}