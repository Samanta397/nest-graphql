# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input IDFilterComparison {
  eq: Float
  gt: Float
  gte: Float
  like: Float
  lt: Float
  lte: Float
  neq: Float
  notLike: Float
}

type Mutation {
  addPermissionsToRole(id: [Int!]!, permissions: [Int!]!): Role!
  addPermissionsToUser(id: [Int!]!, permissions: [Int!]!): User!
  addRolesToUser(id: [Int!]!, roles: [Int!]!): User!
  createPermission(name: String!): Permission!
  createRole(name: String!): Role!
  createUser(email: String!, username: String!): User!
}

input OffsetPaging {
  limit: Int
  offset: Int
}

type Permission {
  id: Int!
  name: String!
}

type Query {
  permission(id: [Int!]!): Permission!
  permissions: [Permission!]!
  role(id: [Int!]!): Role!
  roles: [Role!]!
  user(id: [Int!]!): User!
  users(filter: UserFilterInput, paging: OffsetPaging, sorting: [UserSort!]): [User!]!
}

type Role {
  id: Int!
  name: String!
  permissions: [Permission!]
}

enum SortDirection {
  ASC
  DESC
}

input StringFilterComparison {
  eq: String
  gt: String
  gte: String
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notLike: String
}

type User {
  email: String!
  id: Int!
  permissions: [Permission!]
  roles: [Role!]
  username: String!
}

input UserFilterInput {
  and: [UserFilterInput!]
  email: StringFilterComparison
  id: IDFilterComparison
  or: [UserFilterInput!]
  username: StringFilterComparison
}

input UserSort {
  direction: SortDirection
  field: UserSortField
}

enum UserSortField {
  email
  id
  username
}